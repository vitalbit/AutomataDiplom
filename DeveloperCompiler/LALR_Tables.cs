using System;
//
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Const_LALR_Tables
{
    class LALR_Tables
    {
        public static void InitStack(Stack stack)
        {
           
            stack.Clear();
            stack.Push(0);//q0 == 0

        }

        static string[] strDelimTokenLine = { "> : <", "> : (", ") : (" };

        public static string[] SplitTokenLine(string token_line)//, string[] strDelimTokenLine)
        {
            string[] arrTokenLine = null;
            //new string[] { "> : <", "> : (", ") : (" }
            arrTokenLine = token_line.Split(strDelimTokenLine, StringSplitOptions.None);
            if (arrTokenLine.GetLength(0) != 4)
            {
                //Console.WriteLine("arrTokenLine.GetLength(0) != 4");
                //Console.WriteLine("\nPress any Key to Exit!\n");
                //Console.ReadKey();
                return arrTokenLine;
            }

            //Console.WriteLine("\n arrTokenLine[{0}]: '{1}'", 0, arrTokenLine[0].Substring(1));
            //Console.WriteLine("\n arrTokenLine[{0}]: '{1}'", 1, arrTokenLine[1]);
            //Console.WriteLine("\n arrTokenLine[{0}]: ({1})", 2, arrTokenLine[2]);
            //Console.WriteLine("\n arrTokenLine[{0}]: ({1}", 3, arrTokenLine[3]);


            arrTokenLine[0] = arrTokenLine[0].TrimStart('<');
            arrTokenLine[3] = arrTokenLine[3].TrimEnd(')');

            return arrTokenLine;
        }

        public static bool IsRegular(string token_line)//16
        {
            return (0 == token_line.IndexOf("<id> : <regular>"));
        }
        public static bool IsExpression(string token_line)//6
        {
            return (0 == token_line.IndexOf("<id> : <expression>"));
        }
        public static bool IsAlphabet(string token_line)//1
        {
            return (0 == token_line.IndexOf("<id> : <alphabet>"));
        }
        public static bool IsIdentifier(string token_line)//9
        {
            return (0 == token_line.IndexOf("<id>"))&&
                !(IsRegular(token_line) || IsExpression(token_line) || IsAlphabet(token_line));
        }

        //White literals
        public static bool IsCommNoTail(string token_line)
        {
            return (0 == token_line.IndexOf("<comm>")) || (0 == token_line.IndexOf("<no_tail>"));
        }
        public static bool IsTailDelim(string token_line)
        {
            return (0 == token_line.IndexOf("<delim>")) || (0 == token_line.IndexOf("<tail>"));
        }

        public static bool IsChar(string token_line)//3
        {
            return (0 == token_line.IndexOf("<char>"));
        }
        public static char ValueCharToken(string token_line)
        {
            return char.Parse(token_line.Substring(10, 3).Trim('\''));
        }

        public static bool IsSTR(string token_line)//20
        {
            return (0 == token_line.IndexOf("<STR>"));
        }
        public static string  ValueSTRToken(string token_line)
        {
            return ValueToken(token_line).Trim('"');
        }

        public static bool IsOp(string token_line,char c)
        {
            return (0 == token_line.IndexOf("<op>"))&& (c == token_line[8]);
        }
        public static bool IsOp(string token_line)
        {
            return (0 == token_line.IndexOf("<op>"));
        }
        //ValueOpToken == token_line[8]
        public static int OpTerminal(string token_line)
        {
            int i_ops = all_ops.IndexOf(token_line[8]);
            if (i_ops < 0)
                return -1;
            return IndNamesTA[i_ops];            
        }

        public static string ValueToken(string token_line)
        {
            string[] splitTokenLine = SplitTokenLine(token_line);
            return splitTokenLine[1];
        }      

        public static void PrintRule(string[] arrRule)
        {
            if (arrRule == null)
            {
                Console.WriteLine("(arrRule == null)");
                Console.WriteLine("\nPress the Key Enter to Exit");
                Console.ReadKey();
                return;
            }
            Console.WriteLine("(arrRule != null)");
            foreach (string str in arrRule)
                Console.WriteLine("{0}", str);
        }
        public static string[] getRule(string rule)
        {
            string[] arrRule = null;
            arrRule = rule.Split('=', '*');

            for (int i = 0; i < arrRule.GetLength(0); i++)
                arrRule[i] = arrRule[i].Trim();
            return arrRule;

        }
        public static void PrintSetArray(string name, string[] setArray)
        {
            int n = 0;
            Console.WriteLine("\nArray: string[] {0}", name);
            Console.WriteLine("\n{0}.GetLength(0):{1}", name, setArray.GetLength(0));
            foreach (string sNameNA in setArray)
                Console.WriteLine("/*{0}*/ {1}", n++, sNameNA);
        }
        public static void PrintTableArray(string name, int[,] tableArray)
        {
            int nClmn = 0, nRow = 0;
            nClmn = tableArray.GetLength(1);
            nRow = tableArray.GetLength(0);
            Console.WriteLine("\nTable Array: int [,] {0}\n", name);

            Console.WriteLine("Rows    is {0}.GetLength(0):{1}", name, nRow);
            Console.WriteLine("Columns is {0}.GetLength(1):{1}", name, nClmn);

            Console.WriteLine();

            Console.Write("<{0}>", "q/a".PadLeft(3, ' ').PadRight(4, ' '));
            for (int j = 0; j < nClmn; j++)
                Console.Write("{0}", j.ToString("D").PadLeft(3, ' ').PadRight(4, ' '));
            Console.WriteLine();

            for (int i = 0; i < nRow; i++)
            {
                Console.Write("<{0}>", i.ToString("D").PadLeft(3, ' ').PadRight(4, ' '));
                for (int j = 0; j < nClmn; j++)
                    Console.Write("{0}", tableArray[i, j].ToString("D").PadLeft(3, ' ').PadRight(4, ' '));
                Console.WriteLine();
            }
        }

        public static void PrintOps()
        {
            for (int i = 0; i < all_ops.Length; i++)
                Console.WriteLine("{0}<{1}>-<{2}>", i, all_ops[i], NamesTA[IndNamesTA[i]]);

        }

        /*Nonterminals Alphabet
namesNA.Count == 12*/
        public static string[] NamesNA ={
       "" ,  "Adt" ,  "Alp" ,  "Cls" ,  "Def" ,  "Exp" ,  "Int" ,  "Lst" ,  "Prt" ,  "Reg" ,  "Sub" ,  "Trm" 
/*      0 ,      1 ,      2 ,      3 ,      4 ,      5 ,      6 ,      7 ,      8 ,      9 ,     10 ,     11 
*/
};
        public const string all_ops = "=|*^(){};.[]-,#";
        public static int[] IndNamesTA = { 2, 11, 5, 15, 13, 14, 7, 8, 17, 12, 18, 19, 10, 4, 0 };

        //======
        /*Terminals Alphabet
        namesTA.Count == 21*/
        public static string[] NamesTA ={
      "@" ,  "alp" ,  "asn" ,  "chr" ,  "cmm" ,   "cn" ,  "exp" ,  "fgl" ,  "fgr" ,   "id" ,  "mns" ,   "or" ,  "pnt" ,  "prl" ,  "prr" ,  "pwr" ,  "reg" ,  "smc" ,  "sql" ,  "sqr" ,  "str" 
/*      0 ,      1 ,      2 ,      3 ,      4 ,      5 ,      6 ,      7 ,      8 ,      9 ,     10 ,     11 ,     12 ,     13 ,     14 ,     15 ,     16 ,     17 ,     18 ,     19 ,     20 
*/
};
        //======
        //======
        /*

        Grammar Productions List: grProdsList
        Count of Productions = 23

        */
        public static string[] Grammar_Prod ={
/*0*/ "<> =             Lst", // <> = L
/*1*/ "Adt =      Adt*cn*Trm", // U = U*T
/*2*/ "Adt =             Trm", // U = T
/*3*/ "Alp =         alp*Prt", // A = alphabet P
/*4*/ "Cls =     chr*asn*smc", // C = c=; 
/*5*/ "Cls = chr*asn*sql*Sub*sqr*smc", // C = c=[S];   
/*6*/ "Def = exp*id*asn*Reg*pnt", // D = expression id=R.
/*7*/ "Exp = reg*id*smc*Alp*Def", // E = regular id ; A D
/*8*/ "Int =             chr", // I = c
/*9*/ "Int =     chr*mns*chr", // I = c-c
/*10*/ "Lst =             Exp", // L = E
/*11*/ "Lst =         Lst*Exp", // L = L E
/*12*/ "Prt =             Cls", // P = C
/*13*/ "Prt =         Prt*Cls", // p = P C
/*14*/ "Reg =             Adt", // R = U
/*15*/ "Reg =      Reg*or*Adt", // R = R|U
/*16*/ "Sub =             Int", // S = I
/*17*/ "Sub =     Sub*cmm*Int", // S = S,I
/*18*/ "Trm =             chr", // T = c
/*19*/ "Trm =     fgl*Reg*fgr", // T = {R}
/*20*/ "Trm =     prl*Reg*prr", // T = (R)
/*21*/ "Trm =             str", // T = s
/*22*/ "Trm =         Trm*pwr"  // T = T^
};

        //======
        /*Table NGO_LALR
       Count of Rows =  47
       Count of Columns = 12*/

        public static int[,] NGO_LALR ={
 /* q\A |     | Adt | Alp | Cls | Def | Exp | Int | Lst | Prt | Reg | Sub | Trm 
*/
 /* q\A |   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11 
*/
{/*0000*/   1 ,   1 ,   1 ,   1 ,   1 ,   2 ,   1 ,   3 ,   1 ,   1 ,   1 ,   1 },
{/*0001*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0002*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0003*/   1 ,   1 ,   1 ,   1 ,   1 ,   5 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0004*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0005*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0006*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0007*/   1 ,   1 ,   8 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0008*/   1 ,   1 ,   1 ,   1 ,  10 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0009*/   1 ,   1 ,   1 ,  12 ,   1 ,   1 ,   1 ,   1 ,  13 ,   1 ,   1 ,   1 },
{/*0010*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0011*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0012*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0013*/   1 ,   1 ,   1 ,  16 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0014*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0015*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0016*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0017*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0018*/   1 ,  21 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  22 ,   1 ,  23 },
{/*0019*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0020*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  28 ,   1 ,   1 ,   1 ,  29 ,   1 },
{/*0021*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0022*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0023*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0024*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0025*/   1 ,  21 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  35 ,   1 ,  23 },
{/*0026*/   1 ,  21 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  36 ,   1 ,  23 },
{/*0027*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0028*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0029*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0030*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0031*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  40 },
{/*0032*/   1 ,  41 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  23 },
{/*0033*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0034*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0035*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0036*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0037*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  44 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0038*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0039*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0040*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0041*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0042*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0043*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0044*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0045*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0046*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 }
};

        /*Table TGO_LALR
        Count of Rows =  47
        Count of Columns = 21*/

        public static int[,] TGO_LALR ={
 /* q\A |   @ | alp | asn | chr | cmm |  cn | exp | fgl | fgr |  id | mns |  or | pnt | prl | prr | pwr | reg | smc | sql | sqr | str 
*/
 /* q\A |   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11 |  12 |  13 |  14 |  15 |  16 |  17 |  18 |  19 |  20 
*/
{/*0000*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   4 ,   1 ,   1 ,   1 ,   1 },
{/*0001*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0002*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0003*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   4 ,   1 ,   1 ,   1 ,   1 },
{/*0004*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   6 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0005*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0006*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   7 ,   1 ,   1 ,   1 },
{/*0007*/   1 ,   9 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0008*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  11 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0009*/   1 ,   1 ,   1 ,  14 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0010*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0011*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  15 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0012*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0013*/   1 ,   1 ,   1 ,  14 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0014*/   1 ,   1 ,  17 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0015*/   1 ,   1 ,  18 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0016*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0017*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  19 ,  20 ,   1 ,   1 },
{/*0018*/   1 ,   1 ,   1 ,  24 ,   1 ,   1 ,   1 ,  25 ,   1 ,   1 ,   1 ,   1 ,   1 ,  26 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  27 },
{/*0019*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0020*/   1 ,   1 ,   1 ,  30 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0021*/   1 ,   1 ,   1 ,   1 ,   1 ,  31 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0022*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  32 ,  33 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0023*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  34 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0024*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0025*/   1 ,   1 ,   1 ,  24 ,   1 ,   1 ,   1 ,  25 ,   1 ,   1 ,   1 ,   1 ,   1 ,  26 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  27 },
{/*0026*/   1 ,   1 ,   1 ,  24 ,   1 ,   1 ,   1 ,  25 ,   1 ,   1 ,   1 ,   1 ,   1 ,  26 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  27 },
{/*0027*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0028*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0029*/   1 ,   1 ,   1 ,   1 ,  37 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  38 ,   1 },
{/*0030*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  39 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0031*/   1 ,   1 ,   1 ,  24 ,   1 ,   1 ,   1 ,  25 ,   1 ,   1 ,   1 ,   1 ,   1 ,  26 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  27 },
{/*0032*/   1 ,   1 ,   1 ,  24 ,   1 ,   1 ,   1 ,  25 ,   1 ,   1 ,   1 ,   1 ,   1 ,  26 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  27 },
{/*0033*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0034*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0035*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  42 ,   1 ,   1 ,  32 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0036*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  32 ,   1 ,   1 ,  43 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0037*/   1 ,   1 ,   1 ,  30 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0038*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  45 ,   1 ,   1 ,   1 },
{/*0039*/   1 ,   1 ,   1 ,  46 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0040*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,  34 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0041*/   1 ,   1 ,   1 ,   1 ,   1 ,  31 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0042*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0043*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0044*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0045*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 },
{/*0046*/   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 ,   1 }
};

        /*
            ACTIONS:
                -2-ERROR
                -1-MOVE
                0-ACCEPT
                r-REDUCTION(r>0)
        */
        /*Table AT_LALR_CANONICAL
        Count of Rows =  47
        Count of Columns = 21*/

        public static int[,] AT_LALR_CANONICAL ={
 /* q\A |   @ | alp | asn | chr | cmm |  cn | exp | fgl | fgr |  id | mns |  or | pnt | prl | prr | pwr | reg | smc | sql | sqr | str 
*/
 /* q\A |   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11 |  12 |  13 |  14 |  15 |  16 |  17 |  18 |  19 |  20 
*/
{/*0000*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0001*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0002*/  10 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  10 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0003*/   0 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0004*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0005*/  11 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  11 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0006*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 },
{/*0007*/  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0008*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0009*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0010*/   7 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,   7 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0011*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0012*/  -2 ,  -2 ,  -2 ,  12 ,  -2 ,  -2 ,  12 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0013*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,   3 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0014*/  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0015*/  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0016*/  -2 ,  -2 ,  -2 ,  13 ,  -2 ,  -2 ,  13 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0017*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -1 ,  -2 ,  -2 },
{/*0018*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 },
{/*0019*/  -2 ,  -2 ,  -2 ,   4 ,  -2 ,  -2 ,   4 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0020*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0021*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  14 ,  -2 ,  -2 ,  14 ,  14 ,  -2 ,  14 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0022*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0023*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,   2 ,  -2 ,  -2 ,   2 ,  -2 ,  -2 ,   2 ,   2 ,  -2 ,   2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0024*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  18 ,  -2 ,  -2 ,  18 ,  -2 ,  -2 ,  18 ,  18 ,  -2 ,  18 ,  18 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0025*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 },
{/*0026*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 },
{/*0027*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  21 ,  -2 ,  -2 ,  21 ,  -2 ,  -2 ,  21 ,  21 ,  -2 ,  21 ,  21 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0028*/  -2 ,  -2 ,  -2 ,  -2 ,  16 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  16 ,  -2 },
{/*0029*/  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 },
{/*0030*/  -2 ,  -2 ,  -2 ,  -2 ,   8 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,   8 ,  -2 },
{/*0031*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 },
{/*0032*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 },
{/*0033*/   6 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,   6 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0034*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  22 ,  -2 ,  -2 ,  22 ,  -2 ,  -2 ,  22 ,  22 ,  -2 ,  22 ,  22 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0035*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0036*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0037*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0038*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 },
{/*0039*/  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0040*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,   1 ,  -2 ,  -2 ,   1 ,  -2 ,  -2 ,   1 ,   1 ,  -2 ,   1 ,  -1 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0041*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -1 ,  -2 ,  -2 ,  15 ,  -2 ,  -2 ,  15 ,  15 ,  -2 ,  15 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0042*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  19 ,  -2 ,  -2 ,  19 ,  -2 ,  -2 ,  19 ,  19 ,  -2 ,  19 ,  19 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0043*/  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  20 ,  -2 ,  -2 ,  20 ,  -2 ,  -2 ,  20 ,  20 ,  -2 ,  20 ,  20 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0044*/  -2 ,  -2 ,  -2 ,  -2 ,  17 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  17 ,  -2 },
{/*0045*/  -2 ,  -2 ,  -2 ,   5 ,  -2 ,  -2 ,   5 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 },
{/*0046*/  -2 ,  -2 ,  -2 ,  -2 ,   9 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,  -2 ,   9 ,  -2 }
};


    }//class LALR_Tables
}
